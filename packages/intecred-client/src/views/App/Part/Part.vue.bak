<template>
  <div>
    <IntHeader url-name-redirect="Titles"/>
    <div class="container">
      <div class="container__title-page">
        <h2>Partes</h2>
        <p>
          Caso alguma das partes não esteja incluída abaixo, verifique o seu cadastramento
          nas etapas anteriores.
        </p>
      </div>
      <div v-for="(issuer, index) in partes.emitentes"
           class="container__cards"
           :key="`i-${index}`"
      >
        <InfoHeaderCard
          :grey-bg="true">
          <span class="container__cards__title">Emitente {{ index + 1 }}</span>
        </InfoHeaderCard>
        <CardPart
          class="container__cards__card"
          v-model="issuer.tipoAssinatura"
          @change-signature="changeSignature"
          part="emitentes"
          :key="`i-${index}`"
          :name="issuer.nome"
          :email="issuer.email">
        </CardPart>
        <div class="container__cards__card__spouse" v-if="issuer.estadoCivil === 'married'">
          <InfoHeaderCard>
            <span class="container__cards__title">Cônjuge do emitente {{ index + 1 }}</span>
          </InfoHeaderCard>
          <CardPart
            class="container__cards__card"
            v-model="issuer.conjuge.tipoAssinatura"
            @change-signature="changeSignature"
            :key="`i-${index}`"
            part="emitentes"
            :is-spouse="true"
            :name="issuer.conjuge.nome"
            :email="issuer.conjuge.email">
          </CardPart>
        </div>
      </div>
      <InfoHeaderCard
        :grey-bg="true">
        <span class="container__cards__title">Depositário</span>
      </InfoHeaderCard>
      <CardPart
        class="container__cards__card"
        v-model="partes.depositario.tipoAssinatura"
        @change-signature="changeSignature"
        part="depositario"
        :name="partes.depositario.nome"
        :email="partes.depositario.email">
      </CardPart>
      <div v-for="(guarantor, index) in partes.avalistas"
           class="container__cards"
           :key="`g-${index}`"
      >
        <InfoHeaderCard
          :grey-bg="true">
          <span class="container__cards__title">Avalista {{ index + 1 }}</span>
        </InfoHeaderCard>
        <CardPart
          class="container__cards__card"
          v-model="guarantor.tipoAssinatura"
          @change-signature="changeSignature"
          part="avalistas"
          :key="`g-${index}`"
          :name="guarantor.nome"
          :email="guarantor.email">
        </CardPart>
        <div class="container__cards__card__spouse" v-if="guarantor.estadoCivil === 'married'">
          <InfoHeaderCard>
            <span class="container__cards__title">Cônjuge do avalista{{ index + 1 }}</span>
          </InfoHeaderCard>
          <CardPart
            class="container__cards__card"
            v-model="guarantor.conjuge.tipoAssinatura"
            @change-signature="changeSignature"
            :key="`g-${index}`"
            part="avalistas"
            :is-spouse="true"
            :name="guarantor.conjuge.nome"
            :email="guarantor.conjuge.email">
          </CardPart>
        </div>
      </div>
      <ActionsFooter
        :step="4"
        :back="() => this.forceSaveForm('decrement')"
        :next="() => this.forceSaveForm('increment')"
      />
    </div>
  </div>
</template>

<script>
import IntHeader from '../../../layouts/IntHeader.vue';
import api from '../../../services/api';
import InfoHeaderCard from '../../../components/InfoHeaderCard.vue';
import CardPart from '../../../components/CardPart.vue';
import ActionsFooter from '../Title/Partials/ActionsFooter.vue';

export default {
  name: 'Part',
  mounted() {
    this.getParts();
  },
  data: () => ({
    partes: {
      emitentes: [],
      avalistas: [],
      depositario: {
        nome: '',
        email: '',
        tipoAssinatura: '',
      },
    },
    titulo: '',
    titleIsStored: false,
    guaranteeIsStored: false,
  }),
  computed: {
    title() {
      return parseInt(this.$route.params.titulo, 10);
    },
  },
  methods: {
    async getParts() {
      await api.get(`titulo/obterPartes?tituloId=${this.title}`)
        .then((res) => {
          console.log('partes', res);
          const { data } = res;
          this.titulo = data;
          if (data.depositarioEmitente !== 'false') {
            this.partes.depositario = {
              nome: data.nome,
              email: data.email || 'email não cadastrado',
              tipoAssinatura: this.partes.depositario.tipoAssinatura,
            };
          } else {
            this.partes.depositario = data.depositario;
          }
          this.partes.emitentes = data.emitentes;
        })
        .then(() => {
          api.get('garantias/', { params: { titulo: this.titulo.id } })
            .then(({ data }) => {
              if (!data.length) {
                return;
              }
              this.setGuarantors(data);
            });
        });
    },
    async setGuarantors(data) {
      const guarantors = await data.filter((el) => el.tipo === 'avalista');
      this.partes.avalistas = await guarantors.map((el) => {
        if (el.avalista.tipo === 'pf') {
          const spouse = el.avalista.pessoaFisica.conjuge
            && el.avalista.pessoaFisica.conjuge.nome ? {
              id: el.id,
              nome: el.avalista.pessoaFisica.conjuge.nome,
              email: el.avalista.pessoaFisica.conjuge.email,
              tipoAssinatura: el.avalista.pessoaFisica.conjuge.tipoAssinatura,
            } : null;
          const part = {
            id: el.id,
            nome: el.avalista.pessoaFisica.nome,
            email: el.avalista.pessoaFisica.email,
            tipoAssinatura: el.avalista.tipoAssinatura,
          };
          if (spouse) {
            part.conjuge = spouse;
          }
          return part;
        }
        return {
          id: el.id,
          nome: el.avalista.pessoaJuridica.razaoSocial,
          email: el.avalista.pessoaJuridica.email,
          tipoAssinatura: el.avalista.tipoAssinatura,
        };
      });
    },
    changeSignature(value, part, index, isSpouse) {
      if (part === 'depositario') {
        this.partes.depositario.tipoAssinatura = value;
        return;
      }
      if (isSpouse === undefined) {
        this.partes[part][index.slice(2, index.length)].tipoAssinatura = value;
        return;
      }
      this.partes[part][index.slice(2, index.length)].conjuge.tipoAssinatura = value;
    },
    async forceSaveForm(action) {
      this.titulo.emitentes = this.partes.emitentes;
      this.titulo.depositario = this.partes.depositario;
      this.titulo.avalistas = this.partes.avalistas;
      await api.post(`titulo/tipoAssinatura?tituloId=${this.title}`, this.titulo)
        .then(() => this.redirect(action));
    },
    redirect(action) {
      if (action === 'decrement') {
        this.$router.push({
          name: 'Document',
          params: { titulo: this.$route.params.titulo },
        });
      } else {
        this.$router.push({
          name: 'Draft',
          params: { titulo: this.$route.params.titulo },
        });
      }
    },
  },
  components: {
    ActionsFooter,
    CardPart,
    InfoHeaderCard,
    IntHeader,
  },
};
</script>

<style scoped lang="scss">
.container {
  display: flex;
  width: 100%;
  flex-direction: column;
  max-width: 540px;
  margin: 0 auto;

  &__title-page {
    margin-bottom: 20px;

    h2 {
      font-family: $font_primary;
      font-style: normal;
      font-weight: bold;
      font-size: 24px;
      line-height: 32px;
      letter-spacing: -0.005em;
      color: $--color-primary;
      padding-bottom: 10px;
    }

    p {
      font-family: $font_secondary;
      font-style: normal;
      font-weight: normal;
      font-size: 14px;
      line-height: 22px;
      letter-spacing: -0.004em;
      color: $--color-gray-6;
    }
  }

  &__cards {
    margin: 16px 0;

    &__card {
      margin-top: 16px;

      &__spouse {
        margin-top: 28px;

        .container__cards__card {
          margin-top: 0;
        }
      }
    }

    &__title {
      font-family: $font_secondary;
      font-style: normal;
      font-weight: bold;
      font-size: 16px;
      line-height: 28px;
      color: $--color-gray-7;
    }
  }
}
</style>
